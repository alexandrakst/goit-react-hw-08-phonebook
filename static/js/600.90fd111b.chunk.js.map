{"version":3,"file":"static/js/600.90fd111b.chunk.js","mappings":"yPAEaA,EAAMC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gHAQhBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mFAMpBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qDAKpBK,EAASP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,wF,SClBpB,SAASO,EAAIC,GAAgB,IAAbC,EAAQD,EAARC,SAC7BC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,EAAS,CAAEN,KAAAA,EAAMI,OAAAA,GAEjBG,EAAoB,SAAAC,GACxB,IAAAC,EAAwBD,EAAEE,OAAlBV,EAAIS,EAAJT,KAAMW,EAAKF,EAALE,MACd,OAAQX,GACN,IAAK,OACHC,EAAQU,GACR,MACF,IAAK,SACHN,EAAUM,GACV,MACF,QACE,OAEN,EAQMC,EAAQ,WACZX,EAAQ,IACRI,EAAU,GACZ,EAEA,OACEQ,EAAAA,EAAAA,KAAC9B,EAAG,CAAA+B,UACFC,EAAAA,EAAAA,MAAA,QAAMpB,SAbW,SAAAa,GACnBA,EAAEQ,iBACFrB,EAASW,GACTM,GACF,EASiCE,SAAA,EAC3BC,EAAAA,EAAAA,MAAC5B,EAAK,CAAA2B,SAAA,CAAC,QAELD,EAAAA,EAAAA,KAACxB,EAAK,CACJ4B,KAAK,OACLjB,KAAK,OACLW,MAAOX,EACPkB,MAAM,OACNC,SAAUZ,EACVa,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZP,EAAAA,EAAAA,MAAC5B,EAAK,CAAA2B,SAAA,CAAC,UAELD,EAAAA,EAAAA,KAACxB,EAAK,CACJ4B,KAAK,MACLjB,KAAK,SACLW,MAAOP,EACPc,MAAM,SACNC,SAAUZ,EACVa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEVT,EAAAA,EAAAA,KAACtB,EAAM,CAAC0B,KAAK,SAAQH,SAAC,uBAKhC,CCjEO,I,MAAMS,EAAKvC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mDAKdsC,EAAKxC,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,wEAMduC,EAAIzC,EAAAA,GAAAA,EAAQM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,iCAIZK,EAASP,EAAAA,GAAAA,OAAaQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6FCAnC,EAfoB,SAAHQ,GAAA,IAAMgC,EAAQhC,EAARgC,SAAUC,EAAejC,EAAfiC,gBAAe,OAC9Cd,EAAAA,EAAAA,KAACU,EAAE,CAAAT,SACAY,EAASE,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAI9B,EAAI6B,EAAJ7B,KAAMI,EAAMyB,EAANzB,OAAM,OAC/BW,EAAAA,EAAAA,MAACS,EAAE,CAAAV,SAAA,EACDC,EAAAA,EAAAA,MAACU,EAAC,CAAAX,SAAA,CACCd,EAAK,KAAGI,MAEXS,EAAAA,EAAAA,KAACtB,EAAM,CAAC0B,KAAK,SAASc,QAAS,kBAAMJ,EAAgBG,EAAG,EAAChB,SAAC,aAJnDgB,EAOJ,KAEJ,ECKHE,EAAS,WAGX,IAH0B,IAAdC,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GACfJ,EAAK,GACLO,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWP,IAC3CA,KAAQ,CACb,IAAIQ,EAAqB,GAAdJ,EAAMJ,GAEfH,GADEW,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAEV,CACA,OAAOX,CACT,ECjCa/C,EAAMC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6GAOhBG,EAAQL,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qDCN3B0D,EAAgBZ,IActB,EAZe,SAAHtC,GAAA,IAAMmD,EAAMnD,EAANmD,OAAQC,EAAcpD,EAAdoD,eAAc,OACtC/B,EAAAA,EAAAA,MAAChC,EAAG,CAAA+B,SAAA,EACFD,EAAAA,EAAAA,KAAA,SAAOkC,QAASH,EAAc9B,SAAC,2BAC/BD,EAAAA,EAAAA,KAACxB,EAAK,CACJ4B,KAAK,OACLa,GAAIc,EACJjC,MAAOkC,EACP1B,SAAU2B,MAER,E,UCdKE,EAAc,SAAAC,GAAK,OAAIA,EAAMvB,SAASwB,KAAM,E,UCE5CnE,EAAMC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6J,oBCUd,SAASiE,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACX3B,GAAW4B,EAAAA,EAAAA,IAAYC,GACvBV,GAASS,EAAAA,EAAAA,KAAY,SAAAL,GAAK,OAAIA,EAAMJ,MAAM,KAEhDW,EAAAA,EAAAA,YAAU,WACRJ,EAASK,EAAAA,KACX,GAAG,CAACL,IAEJ,IAwBMM,EAAkBhC,EAASmB,QAAO,SAAAc,GAAO,OAC7CA,EAAQ3D,KAAK4D,cAAcC,SAAShB,EAAOe,cAAc,IAG3D,OACE7C,EAAAA,EAAAA,MAAChC,EAAG,CAAA+B,SAAA,EACFD,EAAAA,EAAAA,KAAA,OAAKiD,QAAQ,WAAUhD,UACrBD,EAAAA,EAAAA,KAACpB,EAAI,CAACE,SA/Bc,SAAAoE,GACxB,IAAMJ,GAAOK,EAAAA,EAAAA,GAAA,CACXlC,GAAIE,KACD+B,GAKL,GAFyBrC,EAASuC,MAAK,SAAAC,GAAI,OAAIA,EAAKlE,OAAS2D,EAAQ3D,IAAI,IAGvE,OAAOmE,EAAAA,OAAAA,QAAe,GAADC,OAAIL,EAAK/D,KAAI,4BAGpCoD,EAASK,EAAAA,GAA8BE,GACzC,OAoBI5C,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,SAAI,cACJD,EAAAA,EAAAA,KAACwD,EAAM,CAACxB,OAAQA,EAAQC,eAhBT,SAAAtC,GACnB,IAAM8D,EAAc9D,EAAEE,OAAOC,MAC7ByC,GAASmB,EAAAA,EAAAA,IAAUD,GACrB,KAcMzD,EAAAA,EAAAA,KAAC2D,EAAW,CACV9C,SAAUgC,EACV/B,gBAvBgB,SAAAG,GACtBsB,EAASK,EAAAA,GAAiC3B,GAC5C,SA0BF,C","sources":["components/Form/Form.styled.js","components/Form/Form.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","redux/contacts/contactsSelectors.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Div = styled.div`\n  border: 2px solid grey;\n  border-radius: 5px;\n  width: 300px;\n  padding: 20px;\n  margin: 20px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  margin: 15px 0 15px 0;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  padding: 10px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { Label, Input, Div, Button } from './Form.styled';\n\nexport default function Form({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const fields = { name, number };\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(fields);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Div>\n      <form onSubmit={handleSubmit}>\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            label=\"Name\"\n            onChange={handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            label=\"Number\"\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n          <Button type=\"submit\">Add contact</Button>\n        </Label>\n      </form>\n    </Div>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  margin-top: 0;\n  text-align: center;\n`;\n\nexport const Li = styled.li`\n  display: flex;\n  align-items: center;\n  margin-top: 0px;\n`;\n\nexport const P = styled.p`\n  margin-right: 20px;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  padding: 10px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\n","import { Li, Ul, P, Button } from './ContactList.styled';\n\nconst ContactList = ({ contacts, onDeleteContact }) => (\n  <Ul>\n    {contacts.map(({ id, name, number }) => (\n      <Li key={id}>\n        <P>\n          {name}: {number}\n        </P>\n        <Button type=\"button\" onClick={() => onDeleteContact(id)}>\n          Delete\n        </Button>\n      </Li>\n    ))}\n  </Ul>\n);\n\nexport default ContactList;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin: 0 40px 0 40px;\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  margin: 20px 0 20px 0;\n`;\n","import { nanoid } from 'nanoid';\nimport { Div, Input } from './Filter.styled';\n\nconst filterInputId = nanoid();\n\nconst Filter = ({ filter, onChangeFilter }) => (\n  <Div>\n    <label htmlFor={filterInputId}>Find contacts by name</label>\n    <Input\n      type=\"text\"\n      id={filterInputId}\n      value={filter}\n      onChange={onChangeFilter}\n    />\n  </Div>\n);\n\nexport default Filter;\n","export const getContacts = state => state.contacts.items;\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 30,`;\n","import React, { useEffect } from 'react';\nimport Form from '../../components/Form/Form';\nimport ContactList from '../../components/ContactList/ContactList';\nimport Filter from '../../components/Filter/Filter';\nimport * as contactsOperations from '../../redux/contacts/contactsOperations';\nimport * as contactsSelectors from '../../redux/contacts/contactsSelectors';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { Div } from './Contacts.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/filterReducer';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(state => state.filter);\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const formSubmitHandler = data => {\n    const contact = {\n      id: nanoid(),\n      ...data,\n    };\n\n    const dublicateContact = contacts.find(item => item.name === contact.name);\n\n    if (dublicateContact) {\n      return Notify.failure(`${data.name} is already in contacts`);\n    }\n\n    dispatch(contactsOperations.addContact(contact));\n  };\n\n  const onDeleteContact = id => {\n    dispatch(contactsOperations.deleteContact(id));\n  };\n\n  const changeFilter = e => {\n    const filterValue = e.target.value;\n    dispatch(setFilter(filterValue));\n  };\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <Div>\n      <div variant=\"outlined\">\n        <Form onSubmit={formSubmitHandler} />\n      </div>\n      <div>\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChangeFilter={changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={onDeleteContact}\n        />\n      </div>\n    </Div>\n  );\n}\n"],"names":["Div","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","Button","_templateObject4","Form","_ref","onSubmit","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","fields","handleInputChange","e","_e$target","target","value","reset","_jsx","children","_jsxs","preventDefault","type","label","onChange","pattern","title","required","Ul","Li","P","contacts","onDeleteContact","map","_ref2","id","onClick","nanoid","size","arguments","length","undefined","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","filterInputId","filter","onChangeFilter","htmlFor","getContacts","state","items","Contacts","dispatch","useDispatch","useSelector","contactsSelectors","useEffect","contactsOperations","visibleContacts","contact","toLowerCase","includes","variant","data","_objectSpread","find","item","Notify","concat","Filter","filterValue","setFilter","ContactList"],"sourceRoot":""}